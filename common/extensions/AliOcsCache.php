<?php

namespace common\extensions;

use yii\caching\MemCache;
use yii\helpers\StringHelper;
use yii\caching\Dependency;

/**
 * 阿里云缓存组件
 * @author Vink Chen <vinkchen@gmail.com>
 */
class AliOcsCache extends MemCache {

    //public $serializer = false;

    public function init() {
        parent::init();
//		$this->serializer = [
//			//serialize
//			function($value) {
//				return $value;
//			},
//			//unserialize
//			function($value) {
//				return $value;
//			}
//		];
    }

    /**
     * Builds a normalized cache key from a given key.
     *
     * If the given key is a string containing alphanumeric characters only and no more than 32 characters,
     * then the key will be returned back prefixed with [[keyPrefix]]. Otherwise, a normalized key
     * is generated by serializing the given key, applying MD5 hashing, and prefixing with [[keyPrefix]].
     *
     * @param mixed $key the key to be normalized
     * @return string the generated cache key
     */
    public function buildKey($key) {
        if (is_string($key)) {
            $key = ctype_alnum(str_replace(['_', ':'], '', $key)) && StringHelper::byteLength($key) <= 32 ? $key : md5($key);
        } else {
            $key = md5(json_encode($key));
        }

        return $this->keyPrefix . $key;
    }

    protected function getValue($key) {
        $value = parent::getValue($key);
        if (YII_DEBUG) {
            \Yii::trace("cache get Key : {$key} ; Value : " . cutstr(var_export($value, 1),100));
        }
        return $value;
    }

    /**
     * Retrieves multiple values from cache with the specified keys.
     * @param array $keys a list of keys identifying the cached values
     * @return array a list of cached values indexed by the keys
     */
    protected function getValues($keys) {
        $values = parent::getValues($keys);
        if (YII_DEBUG) {
            \Yii::trace("Cache get  " . implode(',', $keys) . "\n Result : " . print_r($values, 1));
        }
        return $values;
    }

    protected function setValue($key, $value, $duration) {
        if (YII_DEBUG) {
            \Yii::trace("Cache set Key : $key  ; value : " . print_r($value, 1) . " ; Duration : {$duration}");
        }
        return parent::setValue($key, $value, $duration);
    }

    protected function setValues($data, $duration) {
        if (YII_DEBUG) {
            \Yii::trace("Cache set data : " . print_r($data, 1) . " ; Duration : {$duration}");
        }
        return parent::setValues($data, $duration);
    }

    /**
     * Retrieves a value from cache with a specified key.
     * @param mixed $key a key identifying the cached value. This can be a simple string or
     * a complex data structure consisting of factors representing the key.
     * @return mixed the value stored in cache, false if the value is not in the cache, expired,
     * or the dependency associated with the cached data has changed.
     */
    public function get($key) {
        $key = $this->buildKey($key);
        $value = $this->getValue($key);
        if ($value === false || $this->serializer === false) {
            return $value;
        } elseif ($this->serializer === null) {
            $value = is_array($value) ? $value : unserialize($value);
        } else {
            $value = call_user_func($this->serializer[1], $value);
        }
        if ($value && is_array($value) && !($value[1] instanceof Dependency && $value[1]->getHasChanged($this))) {
            return $value[0];
        } else {
            return false;
        }
    }

    /**
     * Retrieves multiple values from cache with the specified keys.
     * Some caches (such as memcache, apc) allow retrieving multiple cached values at the same time,
     * which may improve the performance. In case a cache does not support this feature natively,
     * this method will try to simulate it.
     * @param string[] $keys list of string keys identifying the cached values
     * @return array list of cached values corresponding to the specified keys. The array
     * is returned in terms of (key, value) pairs.
     * If a value is not cached or expired, the corresponding array value will be false.
     */
    public function mget($keys) {
        $keyMap = [];
        foreach ($keys as $key) {
            $keyMap[$key] = $this->buildKey($key);
        }
        if(!$keyMap) {
            return [];
        }
        $values = $this->getValues(array_values($keyMap));
        $results = [];
        foreach ($keyMap as $key => $newKey) {
            $results[$key] = false;
            if (isset($values[$newKey])) {
                if ($this->serializer === false) {
                    $results[$key] = $values[$newKey];
                } else {
                    $value = $this->serializer === null ? (is_array($values[$newKey]) ? $values[$newKey] : unserialize($values[$newKey])) : call_user_func($this->serializer[1], $values[$newKey]);

                    if ($value && is_array($value) && !($value[1] instanceof Dependency && $value[1]->getHasChanged($this))) {
                        $results[$key] = $value[0];
                    }
                }
            }
        }

        return $results;
    }

    /**
     * 在key的值后添加一个string
     * @param string $key 缓存key
     * @param string $value 添加的string
     */
    public function append($key, $value) {
        return $this->getMemcache()->append($key, $value);
    }
    
    /**
     * 在key的值前添加一个string
     * @param string $key 缓存key
     * @param string $value 添加的string
     */
    public function prepend($key, $value) {
        return $this->getMemcache()->prepend($key, $value);
    }
}